{"version":3,"sources":["redux/recipeActionTypes.js","redux/reducers/recipe.js","redux/reducers/index.js","redux/store.js","config.js","redux/actions/recipe.js","redux/selectors.js","components/RecipeList.js","components/RecipeForm.js","components/RecipeDetails.js","components/MainNav.js","components/DetailsNav.js","containers/MainContainer.js","containers/RecipeDetailsContainer.js","App.js","serviceWorker.js","index.js"],"names":["ADD_RECIPE","UPDATE_RECIPE","DELETING_RECIPE","DELETE_RECIPE","GET_RECIPES","RECEIVE_RECIPES","SELECT_RECIPE","CLEAR_RECIPE","initialState","isGetting","getFailed","deleteFailed","postFailed","updateFailed","errorMessage","isDeletingRecipe","recipeIdToDelete","allIds","byId","selectedId","combineReducers","recipes","state","arguments","length","undefined","action","type","Object","assign","data","payload","dataIds","map","recipe","id","recipesById","forEach","objectSpread","recipeIds","toConsumableArray","push","res","response","console","log","splice","indexOf","form","formReducer","persistedState","serializedState","sessionStorage","getItem","JSON","parse","err","loadState","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","subscribe","throttle","stringify","setItem","_unused","saveState","getState","API_URL","process","receiveRecipes","deleteRecipe","getStateRecipes","getRecipeById","getRecipesList","getRecipeIds","RecipeCard","props","match","react_default","a","createElement","Link","to","concat","url","className","name","RecipeList","key","renderQuill","_ref","input","lib_default","onChange","newValue","delta","source","onBlur","range","quill","getHTML","RenderField","field","Fragment","placeholder","meta","touched","error","IngredientItem","ingredient","index","fields","add","remove","onClick","Field","component","IngredientFieldArray","RecipeFormClass","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","values","_this$props","addRecipe","updateRecipe","Recipe","axios","post","then","setState","postSuccessful","postId","catch","patch","patchSuccessful","_this$props2","handleSubmit","_this$state","Redirect","onSubmit","FieldArray","React","Component","RecipeForm","reduxForm","enableReinitialize","connect","_ref2","initialValues","RecipeDetails","Ingredients","val","scale","ReactHtmlParser","details","MainNav","NavLink","DetailsNav","warningHandler","showWarning","_this2","_this$props$isForm","isForm","_this$props$match","params","deleteSelectedRecipe","MainContainer","getAllRecipes","recipeList","recipeIsGetting","recipeGetFailed","Route","path","render","RecipeDetailsContainer","dispatch","toString","Details","Switch","exact","DetailsNav_DetailsNav","components_RecipeForm","deletingRecipe","App","displayRecipeList","displayRecipeForm","HashRouter","Boolean","window","location","hostname","ReactDOM","es","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aeb723c0.chunk.js","sourcesContent":["export const ADD_RECIPE = 'ADD_RECIPE'\nexport const UPDATE_RECIPE = 'UPDATE_RECIPE'\nexport const DELETING_RECIPE = 'DELETING_RECIPE'\nexport const DELETE_RECIPE = 'DELETE_RECIPE'\nexport const GET_RECIPES = 'GET_RECIPES'\nexport const RECEIVE_RECIPES = 'RECEIVE_RECIPES'\nexport const GET_RECIPE = 'GET_RECIPE'\nexport const SELECT_RECIPE = 'SELECT_RECIPE'\nexport const CLEAR_RECIPE = 'CLEAR_RECIPE'","import { ADD_RECIPE, UPDATE_RECIPE, DELETING_RECIPE, DELETE_RECIPE, GET_RECIPE, GET_RECIPES, SELECT_RECIPE, CLEAR_RECIPE, RECEIVE_RECIPES } from '../recipeActionTypes'\nimport { string } from 'prop-types';\n\nconst initialState = {\n    isGetting: false,\n    getFailed: false,\n    deleteFailed: false,\n    postFailed: false,\n    updateFailed: false,\n    errorMessage: '',\n    isDeletingRecipe: false,\n    recipeIdToDelete: null,\n    allIds: [],\n    byId: {},\n    selectedId: null,\n}\n\nexport default function (state = initialState, action) {\n    switch(action.type) {\n        case GET_RECIPES: {\n            return Object.assign({}, state, {\n                isGetting: true\n            })\n        }\n        case RECEIVE_RECIPES: {\n            const { data } = action.payload\n            if( data && typeof data !== 'string') {\n                const dataIds = data.map(recipe => recipe.id)\n                const recipesById = {}\n    \n                data.forEach(recipe => {\n                    recipesById[recipe.id] = {...recipe}\n                });\n                return Object.assign({}, state, {\n                    isGetting: false,\n                    getFailed: false,\n                    allIds: dataIds,\n                    byId: recipesById\n                })\n            } else {\n                return Object.assign({}, state, {\n                    isGetting: false,\n                    getFailed: true,\n                    errorMessage: action.payload\n                })\n            }\n        }\n        case ADD_RECIPE: {\n            const { data } = action.payload\n            const recipeIds = [...state.allIds]\n            const recipesById = {...state.byId}\n\n            recipeIds.push(data.id)\n            recipesById[data.id] = {...data}\n\n            return {\n                ...state,\n                allIds: recipeIds,\n                byId: recipesById\n            }\n        }\n        case UPDATE_RECIPE: {\n            const { data } = action.payload\n            const recipe = {...state.byId[data.id], ...data}\n            const recipesById = {...state.byId}\n            recipesById[recipe.id] = {...recipe}\n\n            return {\n                ...state,\n                byId: recipesById\n            }\n        }\n        case DELETING_RECIPE: {\n            return Object.assign({}, state, {\n                isDeletingRecipe: true,\n                recipeIdToDelete: action.id\n            })\n        }\n        case DELETE_RECIPE: {\n            const res = action.response\n            console.log(res)\n            const id = state.recipeIdToDelete\n            const recipeIds = [...state.allIds]\n            const recipesById = {...state.byId}\n\n            if( !res ){\n                recipeIds.splice(recipeIds.indexOf(+id), 1)\n                delete recipesById[id]\n\n                return Object.assign({}, state, {\n                    isDeletingRecipe: false,\n                    deleteFailed:false,\n                    recipeIdToDelete: null,\n                    allIds: recipeIds,\n                    byId: recipesById,\n\n                })\n            } else {\n                return Object.assign({}, state, {\n                    isDeletingRecipe: false,\n                    deleteFailed: true,\n                    errorMessage: res\n                })\n            }\n        }\n        case SELECT_RECIPE: {\n            \n            const  id  = action.id\n            \n            return {\n                ...state,\n                selectedId: id,\n            }\n        }\n\n        case CLEAR_RECIPE: {\n            return {\n                ...state,\n                selectedId: null,\n            }\n        }\n        default:\n            return state;\n    }\n}","import recipes from './recipe'\nimport { combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\n\nexport default combineReducers({\n    recipes,\n    form: formReducer\n})","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from \"./reducers\";\nimport { devToolsEnhancer, composeWithDevTools } from 'redux-devtools-extension';\nimport { throttle } from 'lodash';\nimport ReduxThunk from 'redux-thunk';\n\nconst loadState = () => {\n  try {\n    const serializedState = sessionStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}; \n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    sessionStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n\nconst persistedState = loadState()\n\n\n\nconst store = createStore(rootReducer, persistedState, composeWithDevTools(applyMiddleware(ReduxThunk)))\n\n\nstore.subscribe(throttle(() => {\n  saveState({\n    recipes: store.getState().recipes\n  });\n}, 1000));\n\nexport default store","const API_URL = process.env.NODE_ENV !== 'production' ? process.env.REACT_APP_DEV_URL : process.env.REACT_APP_PROD_URL;\n\nexport default API_URL","import * as axios from 'axios';\nimport API_URL from '../../config';\nimport { ADD_RECIPE, UPDATE_RECIPE, DELETING_RECIPE, DELETE_RECIPE, GET_RECIPE, GET_RECIPES, SELECT_RECIPE, CLEAR_RECIPE, RECEIVE_RECIPES } from '../recipeActionTypes'\n\n\n//getRecipes switches the isGetting flag in the redux store to true\n//getRecipes is called within the main get action getAllRecipes so it does not need to be exported.\nfunction getRecipes() {\n    return {\n        type: GET_RECIPES\n    }\n}\n\n//\nfunction receiveRecipes(response){\n    return {\n        type: RECEIVE_RECIPES,\n        payload:response\n    }\n}\n\n\nexport function getAllRecipes(){\n    return function(dispatch){\n        dispatch(getRecipes())\n        return axios.get(API_URL + '/recipes')\n        //if there is an error receiveRecipes will trigger either set getFailed = true and getRecipes = false or push data to state and getRecipes = False\n            .then(res => dispatch(receiveRecipes(res)), err => dispatch(receiveRecipes('error: ' + toString(err))))\n    }\n}\n\n\nexport function addRecipe(response) {\n    return {\n        type: ADD_RECIPE,\n        payload: response\n    }\n}\n\nexport function updateRecipe(response) {\n    return {\n        type: UPDATE_RECIPE,\n        payload: response\n    }\n}\n\nexport function selectRecipe(id) {\n    return {\n        type: SELECT_RECIPE,\n        id\n    }\n}\n\nexport function clearRecipe() {\n    return {\n        type: CLEAR_RECIPE\n    }\n}\n\n//passed id param is assigned to recipeIdToDelete prop in redux store.\nfunction deletingRecipe(id) {\n    return {\n        type: DELETING_RECIPE,\n        id\n    }\n}\n\n\n//provide no response on success, error messaging on fail\nfunction deleteRecipe(response) {\n    return {\n        type: DELETE_RECIPE,\n        response\n    }\n}\n\nexport function deleteSelectedRecipe(id) {\n    return function(dispatch){\n        dispatch(deletingRecipe(id))\n        return axios.delete(API_URL + '/recipes/' + id)\n            .then( res => dispatch(deleteRecipe()), error => dispatch(deleteRecipe('error: ' + toString(error))))\n    }\n}","export const getStateRecipes = store => store.recipes\n\nexport const getRecipeIds = store => ( getStateRecipes(store) ? getStateRecipes(store).allIds : [] )\n\nexport const getRecipeById = (store, id) => ( getStateRecipes(store) ? getStateRecipes(store).byId[id] : {} )\n\nexport const getRecipesList = (store) => getRecipeIds(store).map(id => getRecipeById(store, id))","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction RecipeCard(props) {\n    const { recipe, match } = props\n    return (\n        <Link to={`${match.url}/${recipe.id}`} className='recipe-card' > \n                <h1>{recipe.name}</h1>\n        </Link>\n    )\n}\n\nexport default function RecipeList(props){\n        return (\n            <div className='recipe-collection'>\n                {props.recipes.map(recipe => <RecipeCard key={recipe.id} recipe={recipe} {...props}/>)} \n            </div>\n        )\n    }\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect, Link } from 'react-router-dom'\nimport { Field, FieldArray, reduxForm } from 'redux-form'\nimport { addRecipe, updateRecipe } from '../redux/actions/recipe'\nimport { getRecipeById } from '../redux/selectors'\nimport axios from 'axios';\nimport API_URL from '../config';\nimport ReactQuill from 'react-quill';\n\nconst renderQuill = ({ input }) => {\n  return (\n    <ReactQuill\n      {...input}\n      onChange={(newValue, delta, source) => {\n        if (source === 'user') {\n          input.onChange(newValue);\n        }\n      }}\n      onBlur={(range, source, quill) => {\n        input.onBlur(quill.getHTML());\n      }}\n    />\n  );  \n}\n\n// Usage:\n{/* <Field name=\"description\" component={renderQuill} />; */}\n\nconst RenderField = (field) => {\n    //creates custom input for Field component\n    return(\n        <>\n            <input {...field.input} className={field.className} type={field.type} placeholder={field.placeholder}/>\n            {field.meta.touched && field.meta.error &&\n            <span className=\"error\">{field.meta.error}</span>}\n        </>\n    )\n}\n\nconst RenderTextArea = (field) => {\n    //creates custom textarea for Field component\n    return(\n        <>\n            <textarea {...field.input} className={field.className}>\n                {field.input.value}\n            </textarea>\n            {field.meta.touched && field.meta.error &&\n            <span className=\"error\">{field.meta.error}</span>}\n        </>\n    )\n}\n\nconst IngredientItem = (ingredient, index, fields) => {\n// IngredientItem is callback function passed to array .map function in IngredientFieldArray\n// determine what button to display\n    let add, remove\n    if (fields.length > 1) remove = (<button type='button' onClick={() => fields.remove(index)}> - </button>); //if Ingredients array is more than 1, and current element is not last, show remove button\n    if (fields.length === 0 || index === fields.length-1) add = (<button type='button' onClick={() => fields.push()}> + </button>); //if Ingredient array is empty, or current element is last, show add button\n\n    return (\n        <li key={index}>\n            <div className='ingredientFields'>\n                <Field className='quant-field' name={`${ingredient}.val`} component={RenderField} type='number' placeholder='0'/>\n                <Field className='scale-field' name={`${ingredient}.scale`} component={RenderField} type='text' placeholder='Measure'/>\n                <Field className='name-field' name={`${ingredient}.name`} component={RenderField} type='text' placeholder='Ingredient'/>\n                {remove}\n                {add}\n            </div>\n        </li>\n    )\n}\n\nconst IngredientFieldArray = props => {\n// IngredientFieldArray uses IngredientItem callback to render the list elements\n// This component is wrapped with the FieldArray component in RecipeFormClass for redux-forms functionality\n\n    const {fields} = props\n    if(fields.length === 0) fields.push();\n\n    return (\n        <ul className='ingredients'>\n            {fields.map(IngredientItem)}\n        </ul>\n        \n\n    )\n}\n\n\nclass RecipeFormClass extends React.Component {\n// RecipeForm is a class component because the submit handler requires props.id to determine which axios method to run.\nconstructor(props){\n    super()\n    console.log(props)\n    this.state = {\n        postSuccessful: false,\n        postId:'',\n        patchSuccessful: false,\n    }\n}\n    \n    submit = (values) => {\n        const {id, addRecipe, updateRecipe} = this.props\n        //data object is there because backend expects data.Recipe. I could change it into just an unamed pojo, seems like a lot of effort to reduce a line from the code tho.\n        const data = { Recipe: {...values}}\n        if(id === 'new' ){\n            return axios.post(API_URL + '/recipes', data)\n            .then(res => {\n                addRecipe(res)\n                this.setState({postSuccessful: true, postId: res.data.id})\n            })\n            .catch(error =>{\n                console.log(error)\n            })\n        } else {\n            return axios.patch(API_URL + '/recipes/' + id, data)\n            .then(res => {\n                updateRecipe(res)\n                this.setState({patchSuccessful:true })\n            })\n            .catch(error =>{\n                console.log(error)\n            })\n        }\n    }\n\n    render(){\n        const { handleSubmit, id } = this.props\n        const { postSuccessful, patchSuccessful, postId } = this.state \n\n        if(postSuccessful) return <Redirect to={`/recipes/${postId}`} />;\n        if(patchSuccessful) return <Redirect to={`/recipes/${id}`} />;\n\n        return (\n            <>\n                <form onSubmit={handleSubmit(this.submit)}>\n                    <Field className='title-field' name='name' component={RenderField} type='text' placeholder='Recipe Name' />\n                    <h2>Ingredients</h2>\n                    <FieldArray name='Ingredients' component={IngredientFieldArray}/>\n                    <h2>Instructions</h2>\n                    <Field className='detail-text-area' name='details' component={renderQuill} />\n                    <div>\n                        <button type=\"submit\">Save</button>\n                    </div>\n                </form>\n            </>\n        )\n    }\n}\n\n// mapStateToProps function is only so that RecipeForm can be reused for editing recipes.\n// the { id } in function sig is because connect passes the state and the component's own props as arguments. In essence the func sig is shorthand for doing const id = component's props.id  \nfunction mapStateToProps(state, { id }){\n    return id ==='new' ? {initialValues: {}} : {initialValues: getRecipeById(state, id)}\n}\n\n//adding reduxForm functionality to RecipeFormClass\nlet RecipeForm = reduxForm({\n    form: 'recipe',\n    enableReinitialize : true\n})(RecipeFormClass)\n\n//adding access to other state objects and export\nexport default connect(mapStateToProps, { addRecipe, updateRecipe })(RecipeForm)\n","import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Redirect } from 'react-router-dom';\n\nexport default function RecipeDetails(props) {\n  const {recipe, id } = props\n  if(recipe && (recipe.id === +id)){\n      return (\n      <>\n        <h1>{recipe.name}</h1>\n        <h2>Ingredients</h2>\n        <ul className='ingredients'>\n            {recipe.Ingredients && recipe.Ingredients.map(ingredient => (\n                <li className='ingredient-entry' key={ingredient.name}>\n                    <span>{ingredient.val} {ingredient.scale} {ingredient.name}</span>\n                </li>\n            ))}\n        </ul>\n        <h2>Instructions</h2>\n        <div>{ReactHtmlParser(recipe.details)}</div>\n      </>\n    )\n  } else {\n    return <Redirect to='/recipes' />\n  }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function (props) {\n  return (\n    <nav id={props.id}>\n      <NavLink to='/recipes'>My Recipes</NavLink>\n      <NavLink to='/recipes/new'>Add Recipe</NavLink>\n    </nav>\n  )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class DetailsNav extends React.Component {\n  constructor(props){\n    super()\n    this.state = {\n        showWarning: false,\n    }\n}\n  \n  warningHandler = () => {\n    this.setState({showWarning: !this.state.showWarning})\n  }\n  \n  render() {\n    const { isForm = null, match:{params:{id}, url}, deleteSelectedRecipe } = this.props\n    const { showWarning } = this.state\n    return (\n      <div>\n        {!isForm ? <>\n          <Link to='/recipes'> X </Link>\n          <Link to={`${url}/edit`}> Edit </Link>\n          <button onClick={() => this.warningHandler()}>Delete</button>\n          { showWarning && <>\n              <h4>Are you sure?</h4>\n              <button onClick={() => deleteSelectedRecipe(id) }> yes </button>\n              <button onClick={() => this.warningHandler()}> no </button>\n          </>}        \n        </> : <Link to={ id !== 'new' ? `${url}` : '/recipes'}> Cancel </Link> }\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Route } from 'react-router-dom'\n// import { RouteWithProps } from '../bin'\n\nimport { getAllRecipes } from '../redux/actions/recipe'\nimport { getRecipesList, getStateRecipes } from '../redux/selectors';\nimport { RecipeList, MainNav} from '../components';\nimport { RecipeDetailsContainer } from '.';\n\nclass MainContainer extends React.Component {\n  constructor(props){\n    super(props)\n    this.props.getAllRecipes()\n  }\n\n  render(){\n    const { recipeList, recipeIsGetting, recipeGetFailed } = this.props \n    return (\n      <>\n        <div id='main'>\n          <MainNav id='navbar'/>\n          <Route path='/recipes' render={props =>{\n            return recipeIsGetting ? <p>Loading...</p> : recipeGetFailed ? <p> Failed to load recipes. Try again later </p> : <RecipeList recipes={recipeList} {...props} />\n          }} />\n        </div>\n\n        <Route path='/recipes/:id' component={RecipeDetailsContainer}/>\n      </>\n    )\n}\n}\n\n//the state mapped to props.recipes is actually formatted through selectors.js\n//getRecipesList returns an array of recipe objects\nfunction mapStateToProps(state){\n  const recipeList = getRecipesList(state)\n  const recipeIsGetting = getStateRecipes(state).isGetting\n  const recipeGetFailed = getStateRecipes(state).getFailed\n  \n  return { recipeList, recipeIsGetting, recipeGetFailed } \n}\n\n//exports the connected component\nexport default connect( mapStateToProps, { getAllRecipes })(MainContainer)","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Route, Switch } from 'react-router-dom'\n\nimport { RecipeForm, RecipeDetails, DetailsNav } from '../components';\nimport { getRecipeById } from '../redux/selectors'\nimport { deleteSelectedRecipe } from '../redux/actions/recipe';\n\n\n\n// RecipeList is visually going to be a card, or rectangular box, with the recipe name and details, and full info that expands or opens a RecipeEntry component in new view on click\n// expanded view will reveal an edit and delete button\n// edit button toggles the JSX fragment shown \nclass Details extends React.Component{\n    render(){\n        const { recipe, match, deleteSelectedRecipe } = this.props\n\n        // fragment rendered is changed depending on the local showInput state\n        return (\n            <div id='detail'>\n                <Switch>\n                    <Route exact path='/recipes/new' render={() => {\n                        return (\n                            <>\n                                <DetailsNav match={match} isForm />  \n                                <RecipeForm id='new' />\n                            </>\n                        )\n                    }}/>\n                    <Route exact path={`${match.url}`} render={() => {\n                        //RecipeDetails needs the parent match prop since \n                        return ( \n                            <>\n                                {/* Match.url below should be /recipes/:id so the Link to should = recipes/1/edit when done correctly */}\n                                <DetailsNav match={match} deleteSelectedRecipe={deleteSelectedRecipe}/>\n                                <RecipeDetails id={match.params.id} recipe={recipe} /> \n                            </>\n                       )\n                    }}/>\n                    <Route path={`${match.url}/edit`} render={()=> {\n                        return (\n                            <>\n                                <DetailsNav match={match} isForm />\n                                <RecipeForm id={match.params.id} />\n                            </>\n                        )\n                    }}/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, { match:{ params: { id } } }) {\n    const recipe = getRecipeById(state, id)\n    return { recipe }\n}\n\nexport default connect(mapStateToProps, { deleteSelectedRecipe })(Details)\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { MainContainer } from './containers';\n\nexport default class App extends Component {\n  constructor(props){\n    super()\n    this.state = {\n        displayRecipeList: true,\n        displayRecipeForm: false,\n        \n    }\n}\nrender(){\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <div className='flex-container'>\n                    <Route path='/' component={MainContainer}/>\n                \n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\n\n\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nimport './style/normalize.css';\nimport './style/index.scss';\n\nimport 'react-quill/dist/quill.snow.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    \n    , \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}